name: üöÄ Build and Release

on:
  pull_request:
    branches: [ prod ]
    types: [ closed ]
  push:
    branches: [ prod ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.21'

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    if: github.event.pull_request.merged == true || github.ref == 'refs/heads/prod' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üêπ Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: ‚¨áÔ∏è Download dependencies
      run: go mod download

    - name: üè∑Ô∏è Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Try to extract version from PR title/description
          VERSION=""
          
          # Check PR title for version pattern (e.g., "Release v1.2.0" or "v1.2.0")
          if [ "${{ github.event_name }}" == "pull_request" ] || [ -n "${{ github.event.pull_request.title }}" ]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            VERSION=$(echo "$PR_TITLE" | grep -oE 'v?[0-9]+\.[0-9]+\.[0-9]+' | sed 's/^v//' | head -1)
          fi
          
          # Check commit message for version pattern if not found in PR
          if [ -z "$VERSION" ]; then
            COMMIT_MSG=$(git log -1 --pretty=format:"%s")
            VERSION=$(echo "$COMMIT_MSG" | grep -oE 'v?[0-9]+\.[0-9]+\.[0-9]+' | sed 's/^v//' | head -1)
          fi
          
          # Force 1.2.0 for this specific release (temporary override)
          if [ -z "$VERSION" ] && git log -1 --pretty=format:"%s" | grep -q "1\.2\.0\|Intelligent Features\|Enhanced Stability"; then
            VERSION="1.2.0"
            echo "üéØ Detected major release - forcing version 1.2.0"
          fi
          
          # Fallback to auto-increment only if no version found
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è No version specified, falling back to auto-increment"
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "1.1.5")
            IFS='.' read -r -a VERSION_PARTS <<< "$LAST_TAG"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Building version: $VERSION"

    - name: ‚úÖ Validate version format
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Please use X.X.X format (e.g. 1.0.0)"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"

    - name: üîç Check if version exists
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "‚ùå Version v$VERSION already exists!"
          exit 1
        fi
        echo "‚úÖ Version v$VERSION is available"

    - name: üìö Generate API documentation
      run: |
        echo "üìö Installing swag for documentation generation..."
        go install github.com/swaggo/swag/cmd/swag@latest
        
        echo "üìö Generating API documentation..."
        swag init --generalInfo internal/api/docs.go --output docs/ --parseInternal
        
        echo "‚úÖ API documentation generated successfully"

    - name: üóëÔ∏è Delete remote tag if it exists (for re-runs)
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Tag v$VERSION already exists remotely. Deleting it to re-run workflow."
          git push --delete origin "v$VERSION"
        fi

    - name: üì¶ Build binaries
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        BUILD_DIR="build"
        
        echo "üöÄ Building DuckDuckGo Chat CLI v$VERSION..."
        
        # Create build directory
        mkdir -p $BUILD_DIR
        rm -rf $BUILD_DIR/*
        
        # Build for Linux
        echo "üì¶ Building Linux AMD64..."
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=v$VERSION" -o $BUILD_DIR/duckduckgo-chat-cli_v${VERSION}_linux_amd64 ./cmd/duckchat/main.go
        
        # Build for Windows
        echo "üì¶ Building Windows AMD64..."
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=v$VERSION" -o $BUILD_DIR/duckduckgo-chat-cli_v${VERSION}_windows_amd64.exe ./cmd/duckchat/main.go
        
        # Build for Apple Silicon
        echo "üì¶ Building Darwin ARM64..."
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=v$VERSION" -o $BUILD_DIR/duckduckgo-chat-cli_v${VERSION}_darwin_arm64 ./cmd/duckchat/main.go
        
        # Generate SHA256 hashes
        echo "üîê Generating SHA256 hashes..."
        cd $BUILD_DIR
        sha256sum duckduckgo-chat-cli_v${VERSION}_windows_amd64.exe > duckduckgo-chat-cli_v${VERSION}_windows_amd64.exe.sha256
        sha256sum duckduckgo-chat-cli_v${VERSION}_linux_amd64 > duckduckgo-chat-cli_v${VERSION}_linux_amd64.sha256
        sha256sum duckduckgo-chat-cli_v${VERSION}_darwin_arm64 > duckduckgo-chat-cli_v${VERSION}_darwin_arm64.sha256
        
        # Create release archive
        echo "üìö Creating release archive..."
        zip duckduckgo-chat-cli_v${VERSION}_release.zip \
            duckduckgo-chat-cli_v${VERSION}_linux_amd64 \
            duckduckgo-chat-cli_v${VERSION}_darwin_arm64 \
            duckduckgo-chat-cli_v${VERSION}_windows_amd64.exe \
            duckduckgo-chat-cli_v${VERSION}_windows_amd64.exe.sha256 \
            duckduckgo-chat-cli_v${VERSION}_linux_amd64.sha256 \
            duckduckgo-chat-cli_v${VERSION}_darwin_arm64.sha256
        
        echo "‚úÖ Build v$VERSION complete!"
        ls -lah
        cd ..

    - name: üß™ Test binaries
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        BUILD_DIR="build"
        
        echo "üß™ Testing built binaries..."
        
        # Test Linux binary
        if [ -f "$BUILD_DIR/duckduckgo-chat-cli_v${VERSION}_linux_amd64" ]; then
          chmod +x "$BUILD_DIR/duckduckgo-chat-cli_v${VERSION}_linux_amd64"
          echo "‚úÖ Linux binary is executable"
        else
          echo "‚ùå Linux binary not found"
          exit 1
        fi
        
        # Check file sizes
        echo "üìä File sizes:"
        ls -lah $BUILD_DIR/

    - name: üìù Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        echo "üîç Generating release notes..."
        
        # Get commits since last tag
        if [ -n "$LAST_TAG" ]; then
          echo "üìä Changes since $LAST_TAG:"
          COMMITS=$(git log --pretty=format:"- %s" "$LAST_TAG"..HEAD)
        else
          echo "üìä Initial release - all commits:"
          COMMITS=$(git log --pretty=format:"- %s")
        fi
        
        # Categorize commits
        FEATURES=$(echo "$COMMITS" | grep -E "^- (feat|add|new)" || true)
        FIXES=$(echo "$COMMITS" | grep -E "^- (fix|bug)" || true)
        IMPROVEMENTS=$(echo "$COMMITS" | grep -E "^- (improve|enhance|update|refactor)" || true)
        DOCS=$(echo "$COMMITS" | grep -E "^- (doc|docs)" || true)
        OTHER=$(echo "$COMMITS" | grep -vE "^- (feat|add|new|fix|bug|improve|enhance|update|refactor|doc|docs)" || true)
        
        # Build what's new section
        WHATS_NEW=""
        
        if [ -n "$FEATURES" ]; then
          WHATS_NEW="${WHATS_NEW}### üÜï New Features\n${FEATURES}\n\n"
        fi
        
        if [ -n "$IMPROVEMENTS" ]; then
          WHATS_NEW="${WHATS_NEW}### ‚ö° Improvements\n${IMPROVEMENTS}\n\n"
        fi
        
        if [ -n "$FIXES" ]; then
          WHATS_NEW="${WHATS_NEW}### üêõ Bug Fixes\n${FIXES}\n\n"
        fi
        
        if [ -n "$DOCS" ]; then
          WHATS_NEW="${WHATS_NEW}### üìö Documentation\n${DOCS}\n\n"
        fi
        
        if [ -n "$OTHER" ]; then
          WHATS_NEW="${WHATS_NEW}### üîß Other Changes\n${OTHER}\n\n"
        fi
        
        # Fallback if no categorized commits
        if [ -z "$WHATS_NEW" ] && [ -n "$COMMITS" ]; then
          WHATS_NEW="### üîÑ Changes\n${COMMITS}\n\n"
        fi
        
        # Default message if no commits
        if [ -z "$WHATS_NEW" ]; then
          WHATS_NEW="### üÜï What's New\n- Automated build and release process\n- Cross-platform support (Linux, Windows, macOS)\n- Enhanced security with SHA256 checksums\n\n"
        fi
        
        # Save to output (escape for GitHub Actions)
        echo "WHATS_NEW<<EOF" >> $GITHUB_OUTPUT
        echo -e "$WHATS_NEW" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Release notes generated"

    - name: üè∑Ô∏è Create Git tag
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Create tag with dynamic release notes
        cat > tag_message.txt << 'EOF'
        üöÄ Release v${{ steps.version.outputs.VERSION }}
        
        ${{ steps.release_notes.outputs.WHATS_NEW }}
        ## üì¶ Downloads
        - **Linux:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_linux_amd64`
        - **Windows:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_windows_amd64.exe`
        - **macOS:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_darwin_arm64`
        - **All platforms:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_release.zip`
        
        ## üîê Security
        SHA256 checksums are provided for all binaries.
        
        ---
        *Built with ‚ô• by GitHub Actions*
        EOF
        
        git tag -a "v$VERSION" -F tag_message.txt
        git push --force origin "v$VERSION"
        
        rm tag_message.txt

    - name: üì¢ Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: ü¶Ü DuckDuckGo Chat CLI v${{ steps.version.outputs.VERSION }}
        body: |
          ${{ steps.release_notes.outputs.WHATS_NEW }}
          
          ## üì¶ Downloads
          - **Linux:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_linux_amd64`
          - **Windows:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_windows_amd64.exe`
          - **macOS:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_darwin_arm64`
          - **All platforms:** `duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_release.zip`
          
          ## üîê Security
          SHA256 checksums are provided for all binaries.
          
          ## üöÄ Installation
          
          ### Linux/macOS
          ```bash
          # Download and install
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_linux_amd64 -o duckduckgo-chat-cli
          chmod +x duckduckgo-chat-cli
          sudo mv duckduckgo-chat-cli /usr/local/bin/
          ```
          
          ### Windows
          Download the `.exe` file and add it to your PATH.
          
          ---
          *Built with ‚ô• by GitHub Actions*
        files: |
          build/duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_linux_amd64
          build/duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_darwin_arm64
          build/duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_windows_amd64.exe
          build/duckduckgo-chat-cli_v${{ steps.version.outputs.VERSION }}_release.zip
          build/*.sha256
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: üéâ Success notification
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        echo "üéâ Release v$VERSION created successfully!"
        echo "üì¶ Files available at: https://github.com/benoitpetit/duckduckGO-chat-cli/releases/tag/v$VERSION"
